// 57. Insert Interval
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if ((intervals.length == 0) || ((intervals.length == 1) && (intervals[0].length == 0))) {
            int[][] tempIntervals = new int[1][];
            tempIntervals[0] = newInterval;
            return tempIntervals;
        }
        
        int[] array = new int[intervals.length];
        for (int i = 0; i < intervals.length; ++i) {
            array[i] = intervals[i][0];
        }
        
        int startIndex = binarySearch(array, 0, array.length - 1, newInterval[0]);
        
        int[][] insertedIntervals = new int[intervals.length + 1][];
        
        int j = 0;
        for (int i = 0; i < startIndex; ++i) {
            insertedIntervals[j++] = intervals[i];
        }
        insertedIntervals[j++] = newInterval;
        for (int i = startIndex; i < intervals.length; ++i) {
            insertedIntervals[j++] = intervals[i];
        }
        
        int[][] mergedIntervals = merge(insertedIntervals);
        
        return mergedIntervals;
    }
    
    public int[][] merge(int[][] sortedIntervals) {
        int[][] tempIntervals = new int[sortedIntervals.length][];
        int j = 0;
        
        int[] mergedInterval = new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE};
        
        for (int i = 0; i < sortedIntervals.length; ++i) {
            int[] interval = sortedIntervals[i];
            if ((mergedInterval[0] == Integer.MAX_VALUE) && (mergedInterval[1] == Integer.MAX_VALUE)) {
                mergedInterval = new int[] {interval[0], interval[1]};
            } else if (mergedInterval[1] >= interval[0]) {
                mergedInterval = new int[] {mergedInterval[0], Math.max(mergedInterval[1], interval[1])};
            } else {
                tempIntervals[j++] = mergedInterval;
                mergedInterval = new int[] {interval[0], interval[1]};
            }
        }
        
        if ((mergedInterval[0] != Integer.MAX_VALUE) && (mergedInterval[1] != Integer.MAX_VALUE)) {
            tempIntervals[j++] = mergedInterval;
        }
        
        int length = j;
        
        int[][] mergedIntervals = new int[length][];
        
        for (int i = 0; i < length; ++i) {
            mergedIntervals[i] = tempIntervals[i];
        }
        
        return mergedIntervals;
    }

    public int binarySearch(int[] array, int start, int end, int key) {
        if (start > end) {
            return start;
        }
        
        int middle = (start + end) / 2;
        if (array[middle] == key) {
            return middle;
        } else if (array[middle] > key) {
            return binarySearch(array, start, middle - 1, key);
        } else {
            return binarySearch(array, middle + 1, end, key);
        }
    }
    
    public static void printIntervals(int[][] intervals) {
        for (int i = 0; i < intervals.length; ++i) {
            System.out.print(String.format("[%d, %d] ", intervals[i][0], intervals[i][1]));
        }
        System.out.println("");
    }
    
    public static void main(String[] args) {
        int[][] intervals = {{1,3},{6,9}};
        int[] newInterval = {2,5};
        int[][] intervals2 = {{1,2},{3,5},{6,7},{8,10},{12,16}};
        int[] newInterval2 = {4,8};
        int[][] intervals3 = {};
        int[] newInterval3 = {5,7};
        int[][] intervals4 = {{}};
        int[] newInterval4 = {5,7};
        int[][] intervals5 = {{1,5}};
        int[] newInterval5 = {6,8};
        int[][] intervals6 = {{1,5}};
        int[] newInterval6 = {0,3};
        
        printIntervals(new Solution().insert(intervals, newInterval));
        printIntervals(new Solution().insert(intervals2, newInterval2));
        printIntervals(new Solution().insert(intervals3, newInterval3));
        printIntervals(new Solution().insert(intervals4, newInterval4));
        printIntervals(new Solution().insert(intervals5, newInterval5));
        printIntervals(new Solution().insert(intervals6, newInterval6));
    }
}
